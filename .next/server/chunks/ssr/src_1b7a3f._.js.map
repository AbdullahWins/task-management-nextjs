{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 12, "column": 0}, "map": {"version":3,"sources":["file:///media/abdullahwins/Code/AbdullahWins/next-todo-frontend/src/assets/icons/checked.svg.mjs%20%28structured%20image%20object%29"],"sourcesContent":["import src from \"IMAGE\";\nexport default { src, width: 18, height: 18, blurDataURL: null, blurWidth: 0, blurHeight: 0 }\n"],"names":[],"mappings":";;;AAAA;;uCACe;IAAE,KAAA,8HAAA,CAAA,UAAG;IAAE,OAAO;IAAI,QAAQ;IAAI,aAAa;IAAM,WAAW;IAAG,YAAY;AAAE"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 36, "column": 0}, "map": {"version":3,"sources":["file:///media/abdullahwins/Code/AbdullahWins/next-todo-frontend/src/assets/icons/unchecked.svg.mjs%20%28structured%20image%20object%29"],"sourcesContent":["import src from \"IMAGE\";\nexport default { src, width: 18, height: 18, blurDataURL: null, blurWidth: 0, blurHeight: 0 }\n"],"names":[],"mappings":";;;AAAA;;uCACe;IAAE,KAAA,gIAAA,CAAA,UAAG;IAAE,OAAO;IAAI,QAAQ;IAAI,aAAa;IAAM,WAAW;IAAG,YAAY;AAAE"}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///media/abdullahwins/Code/AbdullahWins/next-todo-frontend/src/app/actions.ts"],"sourcesContent":["'use server'\nimport {revalidatePath} from \"next/cache\";\nimport {redirect} from \"next/navigation\";\n\nconst taskEndpoint = `${process.env.API_BASE_URL}/tasks`\n\nexport interface Task {\n  id: number,\n  title: string,\n  color: string,\n  completed: boolean,\n  createdAt: string,\n  updatedAt: string\n}\n\nexport const getTasks = async (): Promise<Task[]> => {\n  try {\n    const response = await fetch(taskEndpoint);\n\n    if (!response.ok) {\n      throw new Error(`Error fetching tasks: ${response.status} ${response.statusText}`);\n    }\n\n    return await response.json() as Task[];\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\nexport interface TaskCount{\n  total: number;\n  completed: number;\n}\n\nexport const getTaskCount = async (): Promise<TaskCount> => {\n  try {\n    const response = await fetch(`${taskEndpoint}/count`);\n\n    if (!response.ok) {\n      throw new Error(`Error fetching tasks: ${response.status} ${response.statusText}`);\n    }\n\n    return await response.json() as TaskCount;\n  } catch (error) {\n    console.error(error)\n    return {\n      total: 0,\n      completed: 0,\n    }\n  }\n}\n\nexport const getTask = async (id: number): Promise<Task | null> => {\n  try {\n    const response = await fetch(`${taskEndpoint}/${id}`);\n\n    if (!response.ok) {\n      throw new Error(`Error fetching tasks: ${response.status} ${response.statusText}`);\n    }\n\n    return await response.json() as Task;\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n\nexport const changeTaskStatus = async (id: number, completed: boolean): Promise<Task | null> => {\n  try {\n    const formData = new FormData();\n    formData.append(\"completed\", completed.toString());\n    const response = await fetch(`${taskEndpoint}/${id}`, {\n      method: 'PUT',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error fetching tasks: ${response.status} ${response.statusText}`);\n    }\n    revalidatePath(\"/\")\n    return await response.json() as Task;\n  } catch (error) {\n    console.error(error)\n    return null\n  }\n}\n\nexport const deleteTask = async (id: number): Promise<void> => {\n  try {\n    const response = await fetch(`${taskEndpoint}/${id}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error fetching tasks: ${response.status} ${response.statusText}`);\n    }\n\n    revalidatePath(\"/\")\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport interface UpsertTask extends Partial<Task> {\n  error?: string;\n}\n\nexport const upsertTask = async (_prevState: unknown, formData: FormData): Promise<UpsertTask> => {\n  const id: string = formData.get(\"id\") as string;\n  const title: string = formData.get(\"title\") as string;\n  const color: string = formData.get(\"color\") as string;\n  if(id === \"new\") {\n    if(!title) return {\n      error: \"Title is required\",\n    }\n    if(!color) return {\n      error: \"Color is required\",\n    }\n  }\n\n  let url = taskEndpoint;\n  let method = \"POST\";\n  if(id !== \"new\") {\n    url = `${url}/${id}`;\n    method = \"PUT\";\n  }\nlet response: Response | null = null;\n  try {\n     response = await fetch(url, {\n      method,\n      body: formData,\n    })\n\n    if (!response.ok) {\n      throw new Error(`Error fetching tasks: ${response.status} ${response.statusText}`);\n    }\n\n  } catch (error) {\n    console.error(error)\n    return {\n      error: (error as Error).message\n    }\n  }\n  revalidatePath(\"/\")\n  redirect(\"/\")\n  return response?.json() as UpsertTask;\n}"],"names":[],"mappings":";;;;;;;;;;IAea;IAoBA;IAkBA;IAeA;IAoBA;IAoBA"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 77, "column": 0}, "map": {"version":3,"sources":["file:///media/abdullahwins/Code/AbdullahWins/next-todo-frontend/src/components/task-actions/complete-toggle.tsx"],"sourcesContent":["'use client'\nimport Image from \"next/image\";\nimport checked from \"@/assets/icons/checked.svg\";\nimport unchecked from \"@/assets/icons/unchecked.svg\";\nimport {TaskItemProps} from \"@/components/task-item\";\nimport {MouseEventHandler, MouseEvent, useState, useEffect} from \"react\";\nimport {changeTaskStatus} from \"@/app/actions\";\n\nexport const CompleteToggle = (props: TaskItemProps) => {\n  const [completed, setCompleted] = useState<boolean>(false);\n  useEffect(() => {\n    setCompleted(props.data.completed);\n  }, [props]);\n  const onToggleComplete: MouseEventHandler<HTMLButtonElement> = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    changeTaskStatus(props.data.id, !completed).then(task => {\n      if(task) setCompleted(task.completed);\n    })\n  }\n  return (\n    <button className={`p-1.5 hover:bg-primary-gray hover:rounded-lg`} onClick={onToggleComplete}>\n      {\n        completed\n          ? <Image src={checked} alt=\"Completed\"/>\n          : <Image src={unchecked} alt=\"Not Completed\"/>\n      }\n    </button>\n  );\n}"],"names":[],"mappings":";;;;AACA;AACA;AACA;AAEA;AACA;AANA;;;;;;;AAQO,MAAM,iBAAiB,CAAC;IAC7B,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAW;IACpD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,aAAa,MAAM,IAAI,CAAC,SAAS;IACnC,GAAG;QAAC;KAAM;IACV,MAAM,mBAAyD,CAAC;QAC9D,EAAE,cAAc;QAChB,CAAA,GAAA,qHAAA,CAAA,mBAAgB,AAAD,EAAE,MAAM,IAAI,CAAC,EAAE,EAAE,CAAC,WAAW,IAAI,CAAC,CAAA;YAC/C,IAAG,MAAM,aAAa,KAAK,SAAS;QACtC;IACF;IACA,qBACE,8OAAC;QAAO,WAAW,CAAC,4CAA4C,CAAC;QAAE,SAAS;kBAExE,0BACI,8OAAC,6HAAA,CAAA,UAAK;YAAC,KAAK,sSAAA,CAAA,UAAO;YAAE,KAAI;;;;;iCACzB,8OAAC,6HAAA,CAAA,UAAK;YAAC,KAAK,0SAAA,CAAA,UAAS;YAAE,KAAI;;;;;;;;;;;AAIvC"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 141, "column": 0}, "map": {"version":3,"sources":["file:///media/abdullahwins/Code/AbdullahWins/next-todo-frontend/src/assets/icons/trash.svg.mjs%20%28structured%20image%20object%29"],"sourcesContent":["import src from \"IMAGE\";\nexport default { src, width: 13, height: 14, blurDataURL: null, blurWidth: 0, blurHeight: 0 }\n"],"names":[],"mappings":";;;AAAA;;uCACe;IAAE,KAAA,4HAAA,CAAA,UAAG;IAAE,OAAO;IAAI,QAAQ;IAAI,aAAa;IAAM,WAAW;IAAG,YAAY;AAAE"}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file:///media/abdullahwins/Code/AbdullahWins/next-todo-frontend/src/components/task-actions/delete.tsx"],"sourcesContent":["'use client'\nimport Image from \"next/image\";\nimport trash from \"@/assets/icons/trash.svg\";\nimport {MouseEventHandler, MouseEvent} from \"react\";\nimport {TaskItemProps} from \"@/components/task-item\";\nimport {deleteTask} from \"@/app/actions\";\nimport {useModal} from \"@/providers/confirmation-provider\";\n\nexport const Delete = (props: TaskItemProps) => {\n  const {openModal} = useModal();\n  const onDelete: MouseEventHandler<HTMLButtonElement> = (e: MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    openModal(\"Delete Task\", \"Are you sure you want to delete this task?\").then((result: boolean) => {\n      if (result) {\n        deleteTask(props.data.id)\n      }\n    });\n  }\n  return (\n    <button className=\"p-1.5 hover:bg-primary-gray hover:rounded-lg\" onClick={onDelete}>\n      <Image src={trash} alt=\"Trash\" height={16}/>\n    </button>\n  );\n}"],"names":[],"mappings":";;;;AACA;AACA;AAGA;AACA;AANA;;;;;;AAQO,MAAM,SAAS,CAAC;IACrB,MAAM,EAAC,SAAS,EAAC,GAAG,CAAA,GAAA,6IAAA,CAAA,WAAQ,AAAD;IAC3B,MAAM,WAAiD,CAAC;QACtD,EAAE,cAAc;QAChB,UAAU,eAAe,8CAA8C,IAAI,CAAC,CAAC;YAC3E,IAAI,QAAQ;gBACV,CAAA,GAAA,qHAAA,CAAA,aAAU,AAAD,EAAE,MAAM,IAAI,CAAC,EAAE;YAC1B;QACF;IACF;IACA,qBACE,8OAAC;QAAO,WAAU;QAA+C,SAAS;kBACxE,cAAA,8OAAC,6HAAA,CAAA,UAAK;YAAC,KAAK,kSAAA,CAAA,UAAK;YAAE,KAAI;YAAQ,QAAQ;;;;;;;;;;;AAG7C"}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}